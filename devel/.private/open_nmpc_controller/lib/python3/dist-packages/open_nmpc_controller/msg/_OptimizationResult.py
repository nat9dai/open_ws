# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from open_nmpc_controller/OptimizationResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OptimizationResult(genpy.Message):
  _md5sum = "af1bd1e7f40ea424386b21d5312bdc7f"
  _type = "open_nmpc_controller/OptimizationResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Constants match the enumeration of status codes
uint8 STATUS_CONVERGED=0
uint8 STATUS_NOT_CONVERGED_ITERATIONS=1
uint8 STATUS_NOT_CONVERGED_OUT_OF_TIME=2
uint8 STATUS_NOT_CONVERGED_COST=3
uint8 STATUS_NOT_CONVERGED_FINITE_COMPUTATION=4

float64[]    solution              # optimizer (solution)
uint8        inner_iterations      # number of inner iterations
uint16       outer_iterations      # number of outer iterations
uint8        status                # status code
float64      cost                  # cost at solution
float64      norm_fpr              # norm of FPR of last inner problem
float64      penalty               # penalty value
float64[]    lagrange_multipliers  # vector of Lagrange multipliers
float64      infeasibility_f1      # infeasibility wrt F1
float64      infeasibility_f2      # infeasibility wrt F2
float64      solve_time_ms         # solution time in ms

"""
  # Pseudo-constants
  STATUS_CONVERGED = 0
  STATUS_NOT_CONVERGED_ITERATIONS = 1
  STATUS_NOT_CONVERGED_OUT_OF_TIME = 2
  STATUS_NOT_CONVERGED_COST = 3
  STATUS_NOT_CONVERGED_FINITE_COMPUTATION = 4

  __slots__ = ['solution','inner_iterations','outer_iterations','status','cost','norm_fpr','penalty','lagrange_multipliers','infeasibility_f1','infeasibility_f2','solve_time_ms']
  _slot_types = ['float64[]','uint8','uint16','uint8','float64','float64','float64','float64[]','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       solution,inner_iterations,outer_iterations,status,cost,norm_fpr,penalty,lagrange_multipliers,infeasibility_f1,infeasibility_f2,solve_time_ms

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OptimizationResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.solution is None:
        self.solution = []
      if self.inner_iterations is None:
        self.inner_iterations = 0
      if self.outer_iterations is None:
        self.outer_iterations = 0
      if self.status is None:
        self.status = 0
      if self.cost is None:
        self.cost = 0.
      if self.norm_fpr is None:
        self.norm_fpr = 0.
      if self.penalty is None:
        self.penalty = 0.
      if self.lagrange_multipliers is None:
        self.lagrange_multipliers = []
      if self.infeasibility_f1 is None:
        self.infeasibility_f1 = 0.
      if self.infeasibility_f2 is None:
        self.infeasibility_f2 = 0.
      if self.solve_time_ms is None:
        self.solve_time_ms = 0.
    else:
      self.solution = []
      self.inner_iterations = 0
      self.outer_iterations = 0
      self.status = 0
      self.cost = 0.
      self.norm_fpr = 0.
      self.penalty = 0.
      self.lagrange_multipliers = []
      self.infeasibility_f1 = 0.
      self.infeasibility_f2 = 0.
      self.solve_time_ms = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.solution)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.solution))
      _x = self
      buff.write(_get_struct_BHB3d().pack(_x.inner_iterations, _x.outer_iterations, _x.status, _x.cost, _x.norm_fpr, _x.penalty))
      length = len(self.lagrange_multipliers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.lagrange_multipliers))
      _x = self
      buff.write(_get_struct_3d().pack(_x.infeasibility_f1, _x.infeasibility_f2, _x.solve_time_ms))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution = s.unpack(str[start:end])
      _x = self
      start = end
      end += 28
      (_x.inner_iterations, _x.outer_iterations, _x.status, _x.cost, _x.norm_fpr, _x.penalty,) = _get_struct_BHB3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lagrange_multipliers = s.unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.infeasibility_f1, _x.infeasibility_f2, _x.solve_time_ms,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.solution)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.solution.tostring())
      _x = self
      buff.write(_get_struct_BHB3d().pack(_x.inner_iterations, _x.outer_iterations, _x.status, _x.cost, _x.norm_fpr, _x.penalty))
      length = len(self.lagrange_multipliers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.lagrange_multipliers.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.infeasibility_f1, _x.infeasibility_f2, _x.solve_time_ms))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.solution = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 28
      (_x.inner_iterations, _x.outer_iterations, _x.status, _x.cost, _x.norm_fpr, _x.penalty,) = _get_struct_BHB3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lagrange_multipliers = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 24
      (_x.infeasibility_f1, _x.infeasibility_f2, _x.solve_time_ms,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_BHB3d = None
def _get_struct_BHB3d():
    global _struct_BHB3d
    if _struct_BHB3d is None:
        _struct_BHB3d = struct.Struct("<BHB3d")
    return _struct_BHB3d
