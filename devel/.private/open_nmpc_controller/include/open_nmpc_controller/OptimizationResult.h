// Generated by gencpp from file open_nmpc_controller/OptimizationResult.msg
// DO NOT EDIT!


#ifndef OPEN_NMPC_CONTROLLER_MESSAGE_OPTIMIZATIONRESULT_H
#define OPEN_NMPC_CONTROLLER_MESSAGE_OPTIMIZATIONRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace open_nmpc_controller
{
template <class ContainerAllocator>
struct OptimizationResult_
{
  typedef OptimizationResult_<ContainerAllocator> Type;

  OptimizationResult_()
    : solution()
    , inner_iterations(0)
    , outer_iterations(0)
    , status(0)
    , cost(0.0)
    , norm_fpr(0.0)
    , penalty(0.0)
    , lagrange_multipliers()
    , infeasibility_f1(0.0)
    , infeasibility_f2(0.0)
    , solve_time_ms(0.0)  {
    }
  OptimizationResult_(const ContainerAllocator& _alloc)
    : solution(_alloc)
    , inner_iterations(0)
    , outer_iterations(0)
    , status(0)
    , cost(0.0)
    , norm_fpr(0.0)
    , penalty(0.0)
    , lagrange_multipliers(_alloc)
    , infeasibility_f1(0.0)
    , infeasibility_f2(0.0)
    , solve_time_ms(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _solution_type;
  _solution_type solution;

   typedef uint8_t _inner_iterations_type;
  _inner_iterations_type inner_iterations;

   typedef uint16_t _outer_iterations_type;
  _outer_iterations_type outer_iterations;

   typedef uint8_t _status_type;
  _status_type status;

   typedef double _cost_type;
  _cost_type cost;

   typedef double _norm_fpr_type;
  _norm_fpr_type norm_fpr;

   typedef double _penalty_type;
  _penalty_type penalty;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _lagrange_multipliers_type;
  _lagrange_multipliers_type lagrange_multipliers;

   typedef double _infeasibility_f1_type;
  _infeasibility_f1_type infeasibility_f1;

   typedef double _infeasibility_f2_type;
  _infeasibility_f2_type infeasibility_f2;

   typedef double _solve_time_ms_type;
  _solve_time_ms_type solve_time_ms;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATUS_CONVERGED)
  #undef STATUS_CONVERGED
#endif
#if defined(_WIN32) && defined(STATUS_NOT_CONVERGED_ITERATIONS)
  #undef STATUS_NOT_CONVERGED_ITERATIONS
#endif
#if defined(_WIN32) && defined(STATUS_NOT_CONVERGED_OUT_OF_TIME)
  #undef STATUS_NOT_CONVERGED_OUT_OF_TIME
#endif
#if defined(_WIN32) && defined(STATUS_NOT_CONVERGED_COST)
  #undef STATUS_NOT_CONVERGED_COST
#endif
#if defined(_WIN32) && defined(STATUS_NOT_CONVERGED_FINITE_COMPUTATION)
  #undef STATUS_NOT_CONVERGED_FINITE_COMPUTATION
#endif

  enum {
    STATUS_CONVERGED = 0u,
    STATUS_NOT_CONVERGED_ITERATIONS = 1u,
    STATUS_NOT_CONVERGED_OUT_OF_TIME = 2u,
    STATUS_NOT_CONVERGED_COST = 3u,
    STATUS_NOT_CONVERGED_FINITE_COMPUTATION = 4u,
  };


  typedef boost::shared_ptr< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> const> ConstPtr;

}; // struct OptimizationResult_

typedef ::open_nmpc_controller::OptimizationResult_<std::allocator<void> > OptimizationResult;

typedef boost::shared_ptr< ::open_nmpc_controller::OptimizationResult > OptimizationResultPtr;
typedef boost::shared_ptr< ::open_nmpc_controller::OptimizationResult const> OptimizationResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::open_nmpc_controller::OptimizationResult_<ContainerAllocator1> & lhs, const ::open_nmpc_controller::OptimizationResult_<ContainerAllocator2> & rhs)
{
  return lhs.solution == rhs.solution &&
    lhs.inner_iterations == rhs.inner_iterations &&
    lhs.outer_iterations == rhs.outer_iterations &&
    lhs.status == rhs.status &&
    lhs.cost == rhs.cost &&
    lhs.norm_fpr == rhs.norm_fpr &&
    lhs.penalty == rhs.penalty &&
    lhs.lagrange_multipliers == rhs.lagrange_multipliers &&
    lhs.infeasibility_f1 == rhs.infeasibility_f1 &&
    lhs.infeasibility_f2 == rhs.infeasibility_f2 &&
    lhs.solve_time_ms == rhs.solve_time_ms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::open_nmpc_controller::OptimizationResult_<ContainerAllocator1> & lhs, const ::open_nmpc_controller::OptimizationResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace open_nmpc_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af1bd1e7f40ea424386b21d5312bdc7f";
  }

  static const char* value(const ::open_nmpc_controller::OptimizationResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf1bd1e7f40ea424ULL;
  static const uint64_t static_value2 = 0x386b21d5312bdc7fULL;
};

template<class ContainerAllocator>
struct DataType< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "open_nmpc_controller/OptimizationResult";
  }

  static const char* value(const ::open_nmpc_controller::OptimizationResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Constants match the enumeration of status codes\n"
"uint8 STATUS_CONVERGED=0\n"
"uint8 STATUS_NOT_CONVERGED_ITERATIONS=1\n"
"uint8 STATUS_NOT_CONVERGED_OUT_OF_TIME=2\n"
"uint8 STATUS_NOT_CONVERGED_COST=3\n"
"uint8 STATUS_NOT_CONVERGED_FINITE_COMPUTATION=4\n"
"\n"
"float64[]    solution              # optimizer (solution)\n"
"uint8        inner_iterations      # number of inner iterations\n"
"uint16       outer_iterations      # number of outer iterations\n"
"uint8        status                # status code\n"
"float64      cost                  # cost at solution\n"
"float64      norm_fpr              # norm of FPR of last inner problem\n"
"float64      penalty               # penalty value\n"
"float64[]    lagrange_multipliers  # vector of Lagrange multipliers\n"
"float64      infeasibility_f1      # infeasibility wrt F1\n"
"float64      infeasibility_f2      # infeasibility wrt F2\n"
"float64      solve_time_ms         # solution time in ms\n"
"\n"
;
  }

  static const char* value(const ::open_nmpc_controller::OptimizationResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.solution);
      stream.next(m.inner_iterations);
      stream.next(m.outer_iterations);
      stream.next(m.status);
      stream.next(m.cost);
      stream.next(m.norm_fpr);
      stream.next(m.penalty);
      stream.next(m.lagrange_multipliers);
      stream.next(m.infeasibility_f1);
      stream.next(m.infeasibility_f2);
      stream.next(m.solve_time_ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptimizationResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::open_nmpc_controller::OptimizationResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::open_nmpc_controller::OptimizationResult_<ContainerAllocator>& v)
  {
    s << indent << "solution[]" << std::endl;
    for (size_t i = 0; i < v.solution.size(); ++i)
    {
      s << indent << "  solution[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.solution[i]);
    }
    s << indent << "inner_iterations: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inner_iterations);
    s << indent << "outer_iterations: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.outer_iterations);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "cost: ";
    Printer<double>::stream(s, indent + "  ", v.cost);
    s << indent << "norm_fpr: ";
    Printer<double>::stream(s, indent + "  ", v.norm_fpr);
    s << indent << "penalty: ";
    Printer<double>::stream(s, indent + "  ", v.penalty);
    s << indent << "lagrange_multipliers[]" << std::endl;
    for (size_t i = 0; i < v.lagrange_multipliers.size(); ++i)
    {
      s << indent << "  lagrange_multipliers[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lagrange_multipliers[i]);
    }
    s << indent << "infeasibility_f1: ";
    Printer<double>::stream(s, indent + "  ", v.infeasibility_f1);
    s << indent << "infeasibility_f2: ";
    Printer<double>::stream(s, indent + "  ", v.infeasibility_f2);
    s << indent << "solve_time_ms: ";
    Printer<double>::stream(s, indent + "  ", v.solve_time_ms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPEN_NMPC_CONTROLLER_MESSAGE_OPTIMIZATIONRESULT_H
