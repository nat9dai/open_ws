// Generated by gencpp from file open_nmpc_controller/OptimizationParameters.msg
// DO NOT EDIT!


#ifndef OPEN_NMPC_CONTROLLER_MESSAGE_OPTIMIZATIONPARAMETERS_H
#define OPEN_NMPC_CONTROLLER_MESSAGE_OPTIMIZATIONPARAMETERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace open_nmpc_controller
{
template <class ContainerAllocator>
struct OptimizationParameters_
{
  typedef OptimizationParameters_<ContainerAllocator> Type;

  OptimizationParameters_()
    : parameter()
    , initial_guess()
    , initial_y()
    , initial_penalty(0.0)  {
    }
  OptimizationParameters_(const ContainerAllocator& _alloc)
    : parameter(_alloc)
    , initial_guess(_alloc)
    , initial_y(_alloc)
    , initial_penalty(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _parameter_type;
  _parameter_type parameter;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _initial_guess_type;
  _initial_guess_type initial_guess;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _initial_y_type;
  _initial_y_type initial_y;

   typedef double _initial_penalty_type;
  _initial_penalty_type initial_penalty;





  typedef boost::shared_ptr< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> const> ConstPtr;

}; // struct OptimizationParameters_

typedef ::open_nmpc_controller::OptimizationParameters_<std::allocator<void> > OptimizationParameters;

typedef boost::shared_ptr< ::open_nmpc_controller::OptimizationParameters > OptimizationParametersPtr;
typedef boost::shared_ptr< ::open_nmpc_controller::OptimizationParameters const> OptimizationParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator1> & lhs, const ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator2> & rhs)
{
  return lhs.parameter == rhs.parameter &&
    lhs.initial_guess == rhs.initial_guess &&
    lhs.initial_y == rhs.initial_y &&
    lhs.initial_penalty == rhs.initial_penalty;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator1> & lhs, const ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace open_nmpc_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00f21f74662b284bc463c6f9b40a4c7f";
  }

  static const char* value(const ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00f21f74662b284bULL;
  static const uint64_t static_value2 = 0xc463c6f9b40a4c7fULL;
};

template<class ContainerAllocator>
struct DataType< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "open_nmpc_controller/OptimizationParameters";
  }

  static const char* value(const ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[]      parameter         # parameter p (mandatory)\n"
"float64[]      initial_guess     # u0 (optional/recommended)\n"
"float64[]      initial_y         # y0 (optional)\n"
"float64        initial_penalty   # initial penalty (optional)\n"
;
  }

  static const char* value(const ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parameter);
      stream.next(m.initial_guess);
      stream.next(m.initial_y);
      stream.next(m.initial_penalty);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptimizationParameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::open_nmpc_controller::OptimizationParameters_<ContainerAllocator>& v)
  {
    s << indent << "parameter[]" << std::endl;
    for (size_t i = 0; i < v.parameter.size(); ++i)
    {
      s << indent << "  parameter[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.parameter[i]);
    }
    s << indent << "initial_guess[]" << std::endl;
    for (size_t i = 0; i < v.initial_guess.size(); ++i)
    {
      s << indent << "  initial_guess[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.initial_guess[i]);
    }
    s << indent << "initial_y[]" << std::endl;
    for (size_t i = 0; i < v.initial_y.size(); ++i)
    {
      s << indent << "  initial_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.initial_y[i]);
    }
    s << indent << "initial_penalty: ";
    Printer<double>::stream(s, indent + "  ", v.initial_penalty);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPEN_NMPC_CONTROLLER_MESSAGE_OPTIMIZATIONPARAMETERS_H
